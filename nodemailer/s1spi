db.query('SELECT node.user,   (COUNT(parent.user) - (sub_tree.depth + 1)) AS depth FROM feeder AS node, feeder AS parent, feeder AS sub_parent, ( SELECT node.user, (COUNT(parent.user) - 1) AS depth FROM feeder AS node, feeder AS parent WHERE node.lft BETWEEN parent.lft AND parent.rgt AND node.user = ? GROUP BY node.user ORDER BY node.lft) AS sub_tree WHERE node.amount < 4 AND node.lft BETWEEN parent.lft AND parent.rgt AND node.lft BETWEEN sub_parent.lft AND sub_parent.rgt AND sub_parent.user = sub_tree.user GROUP BY node.user HAVING depth > 0 ORDER BY depth', [s1user], function(err, results, fields){
												if(err) throw err;
												var stage1depth = results[0].depth;
												db.query('SELECT node.user,   (COUNT(parent.user) - (sub_tree.depth + 1)) AS depth FROM feeder AS node, feeder AS parent, feeder AS sub_parent, ( SELECT node.user, (COUNT(parent.user) - 1) AS depth FROM feeder AS node, feeder AS parent WHERE node.lft BETWEEN parent.lft AND parent.rgt AND node.user = ? GROUP BY node.user ORDER BY node.lft) AS sub_tree WHERE node.amount  = 0 AND node.lft BETWEEN parent.lft AND parent.rgt AND node.lft BETWEEN sub_parent.lft AND sub_parent.rgt AND sub_parent.user = sub_tree.user GROUP BY node.user HAVING depth > 0 ORDER BY dept', [s1user], function(err, results, fields){
													if (err) throw err;
													var firstspill = {
														user: results[0].user,
														depth: results[0].depth
													}
													if(firstspill.depth === stage1depth){
														db.query('UPDATE stage1_tree SET a = ? WHERE user = ?', [x, firstspill.user], function (err, results, fields){
															if (err) throw err;
																db.query('CALL stage1in(?,?,?)',[s1spon, firstspill.user, x], function(err, results, fields){
														if (err) throw err;
														fillup.fillup( s1user );
														res.render('register', {title: 'Successful Entrance'});
															});
														});
													}
															if(secondspill.depth !== stage1depth){
														db.query('SELECT node.user,   (COUNT(parent.user) - (sub_tree.depth + 1)) AS depth FROM stage1 AS node, stage1 AS parent, stage1 AS sub_parent, ( SELECT node.user, (COUNT(parent.user) - 1) AS depth FROM stage1 AS node, stage1 AS parent WHERE node.lft BETWEEN parent.lft AND parent.rgt AND node.user = ? GROUP BY node.user ORDER BY node.lft) AS sub_tree WHERE node.amount = 1 AND node.lft BETWEEN parent.lft AND parent.rgt AND node.lft BETWEEN sub_parent.lft AND sub_parent.rgt AND sub_parent.user = sub_tree.user GROUP BY node.user HAVING depth > 0 ORDER BY depth', [s1user], function(err, results, fields){
															if (err) throw err; 
															var stage1b = {
													user: results[0].user,
													depth: results[0].depth
															}
															if(stage1b.depth === stage1depth){
																db.query('UPDATE stage1_tree SET b = ? WHERE user = ?', [x, stage1b.user], function (err, results, fields){
																	if (err) throw err;
																	db.query('CALL stage1in(?,?,?)',[s1spon, stage1b.user, x], function(err, results, fields){
																		if (err) throw err;
																		fillup.fillup( s1user );				
																		res.render('register', {title: 'Successful Entrance'});
																	});
																});
															}
															if(stage1b.depth !== stage1depth){
																db.query('SELECT node.user,   (COUNT(parent.user) - (sub_tree.depth + 1)) AS depth FROM stage1 AS node, stage1 AS parent, stage1 AS sub_parent, ( SELECT node.user, (COUNT(parent.user) - 1) AS depth FROM stage1 AS node, stage1 AS parent WHERE node.lft BETWEEN parent.lft AND parent.rgt AND node.user = ? GROUP BY node.user ORDER BY node.lft) AS sub_tree WHERE node.amount = 2 AND node.lft BETWEEN parent.lft AND parent.rgt AND node.lft BETWEEN sub_parent.lft AND sub_parent.rgt AND sub_parent.user = sub_tree.user GROUP BY node.user HAVING depth > 0 ORDER BY depth', [s1user], function(err, results, fields){
																	if (err) throw err; 	
																			var stage1c = {
													user: results[0].user,
													depth: results[0].depth
																	}
																	if(stage1c.depth === stage1depth){
																		db.query('UPDATE stage1_tree SET c = ? WHERE user = ?', [x, stage1c.user], function (err, results, fields){
																			if (err) throw err;
																					db.query('CALL stage1in(?,?,?)',[s1spon, stage1c.user, x], function(err, results, fields){
																			if (err) throw err
																			fillup.fillup( s1user );	
																			res.render('register', {title: 'Successful Entrance'});
																			});									
																		});													
																	}
																			if(stage1c.depth !== stage1depth){
																		db.query('SELECT node.user,   (COUNT(parent.user) - (sub_tree.depth + 1)) AS depth FROM stage1 AS node, stage1 AS parent, stage1 AS sub_parent, ( SELECT node.user, (COUNT(parent.user) - 1) AS depth FROM stage1 AS node, stage1 AS parent WHERE node.lft BETWEEN parent.lft AND parent.rgt AND node.user = ? GROUP BY node.user ORDER BY node.lft) AS sub_tree WHERE node.amount = 3 AND node.lft BETWEEN parent.lft AND parent.rgt AND node.lft BETWEEN sub_parent.lft AND sub_parent.rgt AND sub_parent.user = sub_tree.user GROUP BY node.user HAVING depth > 0 ORDER BY depth', [s1user], function(err, results, fields){
																			if (err) throw err; 
																			var stage1d = {
													user: results[0].user,
													depth: results[0].depth
																			}
																			
																			if(stage1d.depth === stage1.depth){
																				db.query('UPDATE stage1_tree SET d = ? WHERE user = ?', [x, stage1d.user], function (err, results, fields){
														if (err) throw err;
																				db.query('CALL stage1in(?,?,?)',[s1spon, stage1d.user, x], function(err, results, fields){
															if (err) throw err;
														fillup.fillup( s1user );	res.render('register', {title: 'Successful Entrance'});
														
																					});
																				});
																			}